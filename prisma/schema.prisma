generator client {
  provider = "prisma-client-js"
}

generator kysesly {
  provider     = "prisma-kysely"
  output       = "../src/modules/kysesly/kysesly-types/"
  readOnlyIds  = "true"
  enumFileName = "enums.ts"
  fileName     = "kysesly.ts"
}

generator dbml {
  provider              = "prisma-dbml-generator"
  includeRelationFields = false
  manyToMany            = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model classes {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  name              String
  teacherId         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  teachers          teachers            @relation(fields: [teacherId], references: [id])
  student_class     student_class[]
  test_participants test_participants[]
}

model media {
  id                                String      @id @default(dbgenerated("gen_random_uuid()"))
  type                              MediaType
  url                               String
  createdAt                         DateTime    @default(now())
  updatedAt                         DateTime    @default(now()) @updatedAt
  uploader                          String?
  studentId                         String?
  testId                            String?
  media_StudentId                   students?   @relation(fields: [studentId], references: [id])
  media_testId                      tests?      @relation(fields: [testId], references: [id])
  teachers_media_UploaderToteachers teachers?   @relation("media_teacherIdToteachers", fields: [uploader], references: [id])
  questions                         questions[]
  teachers_teachers_photoIdTomedia  teachers[]  @relation("teachers_photoIdTomedia")
  branding                          branding[]
}

model questions {
  id              String            @id @default(dbgenerated("gen_random_uuid()"))
  testId          String
  type            QuestionType
  options         String[]
  correctAnswer   String?
  body            String
  mediaId         String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  points          Int               @default(10)
  isDeleted       Boolean           @default(false)
  index           Int               @default(0)
  timeLimit       Int?
  media           media?            @relation(fields: [mediaId], references: [id])
  tests           tests             @relation(fields: [testId], references: [id])
  student_grading student_grading[]
  test_attempts   test_attempts[]
}

model student_class {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  studentId   String
  classId     String
  removeAfter DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  classes     classes  @relation(fields: [classId], references: [id])
  students    students @relation(fields: [studentId], references: [id])
}

model students {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  email             String
  regNumber         String
  firstName         String
  lastName          String
  middleName        String?
  addedBy           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  media             media[]
  student_class     student_class[]
  student_grading   student_grading[]
  student_tokens    student_tokens[]
  teacherId         teachers            @relation(fields: [addedBy], references: [id])
  test_attempts     test_attempts[]
  test_participants test_participants[]
}

model teachers {
  id                              String     @id @default(dbgenerated("gen_random_uuid()"))
  firstName                       String
  lastName                        String?
  email                           String     @unique
  password                        String?
  photoId                         String?
  banned                          Boolean?   @default(false)
  isEmailVerified                 Boolean?   @default(false)
  createdAt                       DateTime   @default(now())
  updatedAt                       DateTime   @default(now()) @updatedAt
  classes                         classes[]
  media_media_teacherIdToteachers media[]    @relation("media_teacherIdToteachers")
  students                        students[]
  media_teachers_photoIdTomedia   media?     @relation("teachers_photoIdTomedia", fields: [photoId], references: [id])
  tests                           tests[]
  branding                        branding[]
}

model tests {
  id                   String              @id @default(dbgenerated("gen_random_uuid()"))
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  code                 String?             @unique
  printCount           Int?
  instructions         String?
  title                String
  isDeleted            Boolean             @default(false)
  isRevoked            Boolean             @default(false)
  disableCopyPaste     Boolean?            @default(false)
  randomizeQuestions   Boolean?            @default(false)
  requireFullScreen    Boolean?            @default(true)
  teacherId            String
  durationMin          Int                 @default(60)
  showResultsAfterTest Boolean             @default(false)
  platform             Platform            @default(desktop)
  media                media[]
  questions            questions[]
  student_grading      student_grading[]
  student_tokens       student_tokens[]
  test_attempts        test_attempts[]
  test_participants    test_participants[]
  teachers             teachers            @relation(fields: [teacherId], references: [id])
  brandingEnable       Boolean             @default(false)
}

model test_attempts {
  id                      String        @id @default(dbgenerated("gen_random_uuid()"))
  testId                  String
  studentId               String
  questions               String[]
  startedAt               DateTime
  endsAt                  DateTime
  status                  AttemptStatus @default(unsubmitted)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @default(now()) @updatedAt
  currentQuestionId       String
  submittedAt             DateTime?
  currentQuestionRelation questions     @relation(fields: [currentQuestionId], references: [id])
  students                students      @relation(fields: [studentId], references: [id])
  tests                   tests         @relation(fields: [testId], references: [id])

  @@unique([testId, studentId])
}

model test_participants {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  studentId     String
  testId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  origin        String?
  graded        Boolean  @default(false)
  isTouched     Boolean  @default(false)
  student_class classes? @relation(fields: [origin], references: [id])
  student       students @relation(fields: [studentId], references: [id])
  test          tests    @relation(fields: [testId], references: [id])

  @@unique([testId, studentId])
}

model student_grading {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  studentId    String
  questionId   String
  testId       String
  isTouched    Boolean   @default(false)
  point        Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  startedAt    DateTime?
  answer       String?
  isWithinTime Boolean?
  autoGraded   Boolean   @default(false)
  submittedAt  DateTime?
  question     questions @relation(fields: [questionId], references: [id])
  student      students  @relation(fields: [studentId], references: [id])
  test         tests     @relation(fields: [testId], references: [id])

  @@unique([questionId, studentId, testId])
}

model student_tokens {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  studentId  String
  testId     String
  accessCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  student    students @relation(fields: [studentId], references: [id])
  test       tests    @relation(fields: [testId], references: [id])

  @@unique([testId, studentId, accessCode])
}

model branding {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  addedBy         String   @unique
  mediaId         String
  field1          String?
  field2          String?
  field3          String?
  mediaRelation   media    @relation(fields: [mediaId], references: [id])
  teacherRelation teachers @relation(fields: [addedBy], references: [id])
}

enum AttemptStatus {
  submitted
  unsubmitted
}

enum MediaType {
  image
  video
  audio
}

enum QuestionType {
  mcq
  trueOrFalse
  shortAnswer
  essay
}

enum Platform {
  desktop
  mobileAndDesktop
}
