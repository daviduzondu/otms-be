generator client {
  provider = "prisma-client-js"
}

generator kysesly {
  provider     = "prisma-kysely"
  output       = "../src/modules/kysesly/kysesly-types/"
  readOnlyIds  = "true"
  enumFileName = "enums.ts"
  fileName     = "kysesly.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model classes {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  name              String
  teacherId         String
  teachers          teachers            @relation(fields: [teacherId], references: [id])
  student_class     student_class[]
  students          students[]          @relation("StudentClasses")
  test_participants test_participants[]
}

model institutions {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  logo      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  teachers  teachers[]
  tests     tests[]
}

model media {
  id                                String      @id @default(dbgenerated("gen_random_uuid()"))
  type                              MediaType
  url                               String
  createdAt                         DateTime    @default(now())
  updatedAt                         DateTime    @default(now())
  uploader                          String
  teachers_media_UploaderToteachers teachers    @relation("media_teacherIdToteachers", fields: [uploader], references: [id])
  questions                         questions[]
  teachers_teachers_photoIdTomedia  teachers[]  @relation("teachers_photoIdTomedia")
}

model questions {
  id              String            @id @default(dbgenerated("gen_random_uuid()"))
  testId          String
  type            QuestionType
  options         String[]
  timeLimit       Int?
  correctAnswer   String?
  body            String
  mediaId         String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  points          Int               @default(10)
  isDeleted       Boolean           @default(false)
  index           Int               @default(0)
  media           media?            @relation(fields: [mediaId], references: [id])
  tests           tests             @relation(fields: [testId], references: [id])
  student_grading student_grading[]
  test_attempts   test_attempts[]
}

model student_class {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  studentId   String
  classId     String
  removeAfter DateTime
  classes     classes  @relation(fields: [classId], references: [id])
  students    students @relation(fields: [studentId], references: [id])
}

model students {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  email             String
  regNumber         String
  firstName         String
  lastName          String
  middleName        String?
  student_class     student_class[]
  classes           classes[]           @relation("StudentClasses")
  addedBy           String
  teacherId         teachers            @relation(fields: [addedBy], references: [id])
  test_attempts     test_attempts[]
  student_tokens    student_tokens[]
  student_grading   student_grading[]
  test_participants test_participants[]
}

model teachers {
  id                              String        @id @default(dbgenerated("gen_random_uuid()"))
  firstName                       String
  lastName                        String?
  email                           String        @unique
  password                        String?
  photoId                         String?
  banned                          Boolean?      @default(false)
  isEmailVerified                 Boolean?      @default(false)
  authType                        AuthType?
  institutionId                   String?
  createdAt                       DateTime      @default(now())
  updatedAt                       DateTime      @default(now())
  classes                         classes[]
  media_media_teacherIdToteachers media[]       @relation("media_teacherIdToteachers")
  institutions                    institutions? @relation(fields: [institutionId], references: [id])
  media_teachers_photoIdTomedia   media?        @relation("teachers_photoIdTomedia", fields: [photoId], references: [id])
  tests                           tests[]
  students                        students[]
}

model tests {
  id                  String              @id @default(dbgenerated("gen_random_uuid()"))
  institutionId       String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  code                String?             @unique
  printCount          Int?
  durationMin         Int                 @default(60)
  instructions        String?
  title               String
  isDeleted           Boolean             @default(false)
  isRevoked           Boolean             @default(false)
  disableCopyPaste    Boolean?            @default(false)
  passingScore        Int?                @default(70)
  provideExplanations Boolean?            @default(false)
  randomizeQuestions  Boolean?            @default(false)
  requireFullScreen   Boolean?            @default(true)
  showCorrectAnswers  Boolean?            @default(false)
  teacherId           String
  questions           questions[]
  institutions        institutions?       @relation(fields: [institutionId], references: [id])
  teachers            teachers            @relation(fields: [teacherId], references: [id])
  test_attempts       test_attempts[]
  student_tokens      student_tokens[]
  student_grading     student_grading[]
  test_participants   test_participants[]
}

model test_attempts {
  id                String        @id @default(dbgenerated("gen_random_uuid()"))
  testId            String
  studentId         String
  questions         String[]
  startedAt         DateTime
  submittedAt       DateTime?
  endsAt            DateTime
  currentQuestionId String
  status            AttemptStatus @default(unsubmitted)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())

  tests                   tests     @relation(fields: [testId], references: [id])
  students                students  @relation(fields: [studentId], references: [id])
  currentQuestionRelation questions @relation(fields: [currentQuestionId], references: [id])

  @@unique([testId, studentId])
}

model test_participants {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  studentId     String
  testId        String
  origin        String?
  graded        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  test          tests    @relation(fields: [testId], references: [id])
  student       students @relation(fields: [studentId], references: [id])
  student_class classes? @relation(fields: [origin], references: [id])

  @@unique([testId, studentId])
}

model student_grading {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  studentId    String
  questionId   String
  testId       String
  answer       String?
  isTouched    Boolean   @default(false)
  point        Int?
  autoGraded   Boolean   @default(false)
  isWithinTime Boolean?
  startedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  student  students  @relation(fields: [studentId], references: [id])
  question questions @relation(fields: [questionId], references: [id])
  test     tests     @relation(fields: [testId], references: [id])

  @@unique([questionId, studentId, testId])
}

model student_tokens {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  studentId  String
  testId     String
  accessCode String
  student    students @relation(fields: [studentId], references: [id])
  test       tests    @relation(fields: [testId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([testId, studentId, accessCode])
}

enum AttemptStatus {
  submitted
  unsubmitted
}

enum AuthType {
  local
  google
}

enum MediaType {
  image
  video
  pdf
  audio
}

enum QuestionType {
  mcq
  trueOrFalse
  shortAnswer
  essay
}

enum TestStatus {
  active
  pending
  completed
  paused
}
