generator client {
  provider = "prisma-client-js"
}

generator kysesly {
  provider     = "prisma-kysely"
  output       = "../src/modules/kysesly/kysesly-types/"
  readOnlyIds  = "true"
  enumFileName = "enums.ts"
  fileName     = "kysesly.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model classes {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  name          String
  teacherId     String
  teachers      teachers        @relation(fields: [teacherId], references: [id])
  student_class student_class[]
  students      students[]      @relation("StudentClasses")
}

model institutions {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  logo      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  teachers  teachers[]
  tests     tests[]
}

model media {
  id                                 String      @id @default(dbgenerated("gen_random_uuid()"))
  type                               MediaType
  url                                String
  createdAt                          DateTime    @default(now())
  updatedAt                          DateTime    @default(now())
  teacherId                          String
  teachers_media_teacherIdToteachers teachers    @relation("media_teacherIdToteachers", fields: [teacherId], references: [id])
  questions                          questions[]
  teachers_teachers_photoIdTomedia   teachers[]  @relation("teachers_photoIdTomedia")
}

model questions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  testId        String
  type          QuestionType
  options       String[]
  correctAnswer String?
  body          String
  mediaId       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  points        Int          @default(10)
  isDeleted     Boolean      @default(false)
  index         Int          @default(0)
  media         media?       @relation(fields: [mediaId], references: [id])
  tests         tests        @relation(fields: [testId], references: [id])
}

model student_class {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  studentId   String
  classId     String
  removeAfter DateTime
  classes     classes  @relation(fields: [classId], references: [id])
  students    students @relation(fields: [studentId], references: [id])
}

model students {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  email         String
  regNumber     String
  firstName     String
  lastName      String
  middleName    String?
  student_class student_class[]
  classes       classes[]       @relation("StudentClasses")
}

model teachers {
  id                              String        @id @default(dbgenerated("gen_random_uuid()"))
  firstName                       String
  lastName                        String?
  email                           String        @unique
  password                        String?
  photoId                         String?
  banned                          Boolean?      @default(false)
  isEmailVerified                 Boolean?      @default(false)
  authType                        AuthType?
  institutionId                   String?
  createdAt                       DateTime      @default(now())
  updatedAt                       DateTime      @default(now())
  classes                         classes[]
  media_media_teacherIdToteachers media[]       @relation("media_teacherIdToteachers")
  institutions                    institutions? @relation(fields: [institutionId], references: [id])
  media_teachers_photoIdTomedia   media?        @relation("teachers_photoIdTomedia", fields: [photoId], references: [id])
  tests                           tests[]
}

model tests {
  id                  String        @id @default(dbgenerated("gen_random_uuid()"))
  endsAt              DateTime?
  institutionId       String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  code                String?       @unique
  printCount          Int?
  instructions        String?
  title               String
  isDeleted           Boolean       @default(false)
  isRevoked           Boolean       @default(false)
  startsAt            DateTime?
  disableCopyPaste    Boolean?      @default(false)
  passingScore        Int?          @default(70)
  provideExplanations Boolean?      @default(false)
  randomizeQuestions  Boolean?      @default(false)
  requireFullScreen   Boolean?      @default(false)
  showCorrectAnswers  Boolean?      @default(false)
  teacherId           String
  questions           questions[]
  institutions        institutions? @relation(fields: [institutionId], references: [id])
  teachers            teachers      @relation(fields: [teacherId], references: [id])
}

enum AuthType {
  local
  google
}

enum MediaType {
  image
  video
  pdf
  audio
}

enum QuestionType {
  mcq
  trueOrFalse
  shortAnswer
  essay
}

enum TestStatus {
  active
  pending
  completed
  paused
}
