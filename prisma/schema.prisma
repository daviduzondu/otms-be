// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator kysesly {
  provider     = "prisma-kysely"
  output       = "../src/modules/kysesly/kysesly-types/"
  fileName     = "kysesly.ts"
  enumFileName = "enums.ts"
  readOnlyIds  = true
}

// generator nestjsDto {
//  provider                      = "prisma-generator-nestjs-dto"
//  output                        = "../src/generated/dto/"
//  generateFileTypes             = "dto"
//  fileNamingStyle               = "camel"
//  classValidation               = "true"
//  prettier                      = "true"
//  exportRelationModifierClasses = "false"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionType {
  mcq
  trueOrFalse
  shortAnswer
  essay
}

enum MediaType {
  image
  video
  pdf
  audio
}

enum AuthType {
  local
  google
}

enum TestStatus {
  active
  pending
  completed
  paused
}

model teachers {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  firstName       String
  lastName        String?
  /// @email
  email           String        @unique
  password        String?
  photoId         String? // If there's a specific profile photo (optional)
  photo           media?        @relation("profile_photo", fields: [photoId], references: [id])
  banned          Boolean?      @default(false)
  isEmailVerified Boolean?      @default(false)
  authType        AuthType?
  institutionId   String?
  institution     institutions? @relation(fields: [institutionId], references: [id])
  uploads         media[]       @relation("uploads") // One teacher can upload many media
  tests           tests[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  classes         classes[]
}

model institutions {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  logo      String
  teachers  teachers[]
  tests     tests[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model media {
  id        String      @id @default(dbgenerated("gen_random_uuid()"))
  type      MediaType
  url       String
  teacherId String
  teacher   teachers    @relation("uploads", fields: [teacherId], references: [id])
  teachers  teachers[]  @relation("profile_photo")
  questions questions[] // One media can be used in multiple questions
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model tests {
  id                  String        @id @default(dbgenerated("gen_random_uuid()"))
  teacherId           String
  teacher             teachers      @relation(fields: [teacherId], references: [id])
  title               String
  instructions        String?
  printCount          Int?
  passingScore        Int?          @default(70)
  requireFullScreen   Boolean?      @default(false)
  showCorrectAnswers  Boolean?      @default(false)
  disableCopyPaste    Boolean?      @default(false)
  provideExplanations Boolean?      @default(false)
  randomizeQuestions  Boolean?      @default(false)
  startsAt            DateTime?
  endsAt              DateTime?
  isRevoked           Boolean       @default(false)
  isDeleted           Boolean       @default(false)
  institution         institutions? @relation(fields: [institutionId], references: [id])
  institutionId       String?
  code                String?       @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now()) @updatedAt
  questions           questions[] // A test can have many questions
}

model classes {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  teacherId String
  teacher   teachers @relation(fields: [teacherId], references: [id])

  student       students[]      @relation("StudentClasses")
  student_class student_class[]
}

model students {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  firstName     String
  middleName    String?
  lastName      String
  email         String
  regNumber     String
  classes       classes[]       @relation("StudentClasses")
  student_class student_class[]
}

model student_class {
  id String @id @default(dbgenerated("gen_random_uuid()"))

  studentId   String
  classId     String
  removeAfter DateTime
  student     students @relation(fields: [studentId], references: [id])
  class       classes  @relation(fields: [classId], references: [id])
}

model questions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  testId        String
  test          tests        @relation(fields: [testId], references: [id])
  type          QuestionType
  options       String[]
  index         Int          @default(0)
  points        Int          @default(10)
  correctAnswer String?
  body          String
  mediaId       String?
  isDeleted     Boolean      @default(false)
  media         media?       @relation(fields: [mediaId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
}
